# Permaweb Documentation Collection

Generated on: 2025-09-15T12:17:48.860Z
Total documents: 1
Total words: 9868

## Table of Contents

### Included Documents

1. [Glossary.txt](https://glossary.arweave.net/glossary.txt)

---

# 1. Glossary.txt

Document Number: 1
Source: https://glossary.arweave.net/glossary.txt
Words: 9868
Quality Score: 1.000
Extraction Method: plain-text
Extraction Reason: plain-text-file

ANS-104: A standard for bundled data on Arweave, allowing for efficient storage of multiple pieces of data in a single transaction. It forms the basis for scalable data storage and retrieval on the network.
Messaging Patterns: Communication frameworks in AO that define how processes exchange information through message passing. These patterns include asynchronous fire-and-forget messaging (ao.send), request-response cycles (ao.send().receive()), message forwarding chains (msg.forward), and various blocking and non-blocking communication models. Messaging patterns provide structured approaches for inter-process communication, enabling complex distributed systems to coordinate effectively.
ao.send: A non-blocking function in AO for asynchronous message sending that enables fire-and-forget communication between processes. It returns immediately after sending, allowing the sending process to continue execution without waiting for a response. The function returns a promise-like object that can be chained with .receive() for request-response patterns when needed.
ao.send().receive(): A blocking message pattern in AO that combines sending a message and waiting for a specific reply, enabling request-response cycles between processes. It only matches messages linked by X-Reference and can specify a target process ID to indicate which process will reply. This pattern is essential for synchronous interactions in the otherwise asynchronous AO environment.
msg.reply: A non-blocking function in AO handlers used to respond to incoming messages with automatic reference tracking. It enables asynchronous request-response patterns by automatically linking the response to the original message via X-Reference and setting the Target to the original sender or Reply-To address if specified.
msg.forward: A non-blocking function in AO for message routing across multiple processes that creates a sanitized copy of the original message. It preserves Reply-To and X-Reference properties for complete message tracking and sets X-Origin to the original sender, enabling final services to reply directly to the originator. This function is key for creating multi-step processing pipelines (A → B → C → A patterns).
Receive: A blocking function in AO (with capital R) that s execution until any message matching a specified pattern arrives from any sender. Unlike the lowercase .receive() method, it's not bound to a specific conversation and can match messages from any process, making it useful for synchronous message processing flows or event listening.
Handlers.utils.reply: A utility function in AO that creates a handler function that automatically replies with a fixed response. It serves as a wrapper around msg.reply for common use cases, enabling concise creation of simple response handlers without writing full handler functions.
Reference: A unique identifier automatically assigned to each message in AO that enables tracking message history and relationships. References form the foundation of AO's message correlation system, allowing processes to maintain conversation context across asynchronous communications.
Reply-To: A message property in AO that explicitly specifies the destination for responses, overriding the default behavior of replying to the original sender. This enables more flexible routing patterns where responses can be directed to different processes than the message originator.
X-Reference: A special message property in AO that maintains conversation chains across replies and forwards. It links related messages together in a conversation, enabling processes to track which response corresponds to which request, even in complex multi-step processing pipelines.
X-Origin: A message property in AO that tracks the original sender of a message through forwarding chains. It enables final services in a processing pipeline to reply directly to the conversation originator without knowing its specific identity in advance, facilitating multi-step processing workflows.
Blocking Communication: A messaging approach in AO where the sending process s execution until a response is received. This pattern is implemented through functions like Receive and ao.send().receive(), creating synchronous interaction points in an otherwise asynchronous system. Blocking is useful for scenarios requiring guaranteed order of operations or direct response handling.
Non-blocking Communication: A messaging approach in AO where the sending process continues execution immediately after sending a message, without waiting for responses. Implemented through functions like ao.send, msg.reply, and msg.forward, this pattern enables parallel processing and higher throughput in distributed systems by avoiding execution s.
Process: A computational unit in AO that can receive and send messages. Processes are represented by a log of interacting messages stored on Arweave, as well as an initialization data item.
Message: The fundamental unit of communication in AO and the AO Core Protocol. In AO, messages are ANS-104 compliant data items that can be sent between processes or from users to processes. In the AO Core Protocol, every item on the permaweb is described as a Message, interpretable as either a map of named functions or as a concrete binary term. Messages can be called through the creation of another message, providing a map of arguments to the execution. Both systems use messages as the primary mechanism for communication and state management.
Handler: A function in an AO process that responds to specific message patterns. Handlers are registered to match particular message patterns and execute code when matching messages are received.
Resolvers: Special tables in AO handlers where each key is a pattern matching table and its corresponding value is a function that executes when that pattern matches. Resolvers enable conditional execution based on additional pattern matching, creating switch/case-like structures where different functions are triggered based on which pattern matches the incoming message.
Pattern Matching Tables: Declarative structures in AO that define how to match incoming messages based on their attributes. These tables support simple tag matching, wildcard matching with underscore ('_'), Lua string pattern matching (similar to regex), and function-based validation. They provide a flexible way to filter messages for processing by specific handlers.
Handlers.utils.hasMatchingData: A utility function in AO that returns a pattern matching function for checking if a message's Data field contains a specified string. This helper simplifies creating handlers that respond to specific message content rather than just tags, enabling content-based message routing and processing.
Handlers.utils.hasMatchingTag: A utility function in AO that returns a pattern matching function for checking if a message has a tag with a specified name and value. This helper enables precise matching of messages based on their tag attributes, facilitating targeted message handling and routing in AO processes.
Handlers.add: A core function in AO for registering message handlers that takes a name, pattern, and handler function as arguments. It adds or updates a handler in the process's handler list, enabling processes to respond to specific message patterns. The pattern can be a table, function, or string (in AOS 2.0+), and the handler can be a function or resolver table for conditional execution.
Handlers.once: A specialized handler registration function in AO that creates a handler which runs only once when its pattern is matched, then is automatically removed. This is equivalent to setting maxRuns = 1 and is useful for one-time initialization or handling unique events that should trigger only a single response.
Handler Execution Flow: The process by which AO determines which handlers to run when a message arrives. Handlers are executed in sequential order as they appear in the Handlers.list, with pattern functions determining whether to: skip the handler (false), process the message and continue checking subsequent handlers ("continue"), or process the message and checking further handlers ("break"). This flow control enables sophisticated message processing pipelines within AO processes.
ArFS: A data modeling, storage, and retrieval protocol designed to emulate common file system operations on Arweave's permanent storage. ArFS solves key challenges by implementing a hierarchical file structure, metadata management, file permissions (public and private with encryption), file versioning, data deduplication, search capabilities, and interoperability with other decentralized applications. It works around Arweave's immutable nature by using an append-only transaction data model with tags in Arweave Transaction headers, enabling features like file renaming and organization despite the underlying permanent storage.
Spawn: The action of creating a new process in AO. Processes can spawn other processes, creating a hierarchical relationship.
Actor Model: The computational paradigm that AO is based on, where each process (actor) is an independent unit with its own state that communicates exclusively through message passing.
HyperBEAM: The distributed execution engine that powers AO, built on Erlang/OTP. It provides distributed computation, deterministic execution, message scheduling, and WASM runtime capabilities.
Arweave Wallet Kit: A modular toolkit that simplifies interactions between Arweave wallets and dApps by providing a unified API that supports any Arweave wallet. It's built around a core package as the foundation, with additional packages for React hooks, components, and styles. The kit uses 'strategies' as modular implementations for different wallet providers, currently supporting Wander.app, Arweave.app, Othent, and general browser wallets. This architecture enables users to interact with apps using their preferred wallet while giving developers a consistent interface across all wallet types.
Compute Unit: A node in the AO network responsible for executing process code and managing state. CUs offer the service of resolving process state in competition with one another.
Scheduler Unit: A node in the AO network responsible for the single assignment of atomically incrementing slot numberings to messages sent to a process, ensuring deterministic ordering.
Messenger Unit: A node in the AO network that relays messages around the system, serving as the entry point for users to interact with processes within AO.
Cron: A time-based job scheduler in AO that enables processes to execute functions on a schedule, allowing for autonomous contract execution.
Holographic State: A state management approach in AO where each process maintains its state independently of other processes, represented by a log of messages stored on Arweave. This independence allows processes to operate and be evaluated separately, facilitating faster interactions and improved scalability. The state is considered 'holographic' because it's implied by the associated message log rather than being explicitly stored, enabling true parallel processing while maintaining verifiability.
AOS: The AO operating system, which serves as a reference model for software creation on AO. It allows developers to initiate processes, install packages, and edit code within a live environment.
Arweave: A decentralized storage network that allows users to store data permanently and sustainably. It serves as the foundation layer for the permaweb ecosystem and has its own native cryptocurrency called AR Token that powers the network's economic model.
Blockweave: Arweave's innovative data structure that improves upon traditional blockchain technology. Unlike sequential blockchain verification, it requires only random data verification for new additions, creating a 3D spider web-like structure. This approach dramatically reduces energy consumption while maintaining data immutability. The blockweave supports petabyte-scale storage and features continuous data validation (over 5,670 validations daily). It includes advanced features like bundled transactions (up to 1000 per block) and incentivized data replication, enabling efficient storage and verification of large datasets.
Permaweb: A permanent, decentralized web built on top of the Arweave network, allowing for the creation of websites and applications that are accessible forever. It represents the user-facing layer of the Arweave ecosystem.
AR.IO: The first permanent cloud network. No 404s, no lost dependencies, no subscriptions - just reliable access to applications and data for site and app hosting.
AR.IO Gateway: A server that provides access to data stored on the Arweave network. Part of the AR.IO network's decentralized infrastructure for serving permanent data and managing network traffic.
Bundling: A feature in Arweave that groups multiple data transactions together, processing them as Layer-1 transactions to improve efficiency and reduce costs. This is implemented through the ANS-104 standard.
AO Token: The native token of the AO ecosystem, used for resource allocation, governance, and payments within the network. One AO is equal to one trillion (1,000,000,000,000) Armstrongs, which is the smallest unit of the token. When specifying token quantities in transactions, the amount is typically expressed in Armstrongs rather than AO (e.g., 1,000,000 Armstrongs = 0.0000001 AO).
Pi Token (π): A token in the AO ecosystem representing ownership of key permaweb assets, including AO, AR, and fair-launch projects, serving as a default means of exchange.
AO-SQLite: A module for AO that combines the AO operating system with SQLite to create a lightweight but powerful indexer for the AOS experience.
ArFleet: A framework in AO designed to facilitate the purchase of time-limited data storage from permissionless peers without requiring third-party enforcement.
Trusted Execution Environment: A secure area of a processor in AO that guarantees code and data loaded inside is protected with respect to confidentiality and integrity, similar to a CPU with the security of a hardware wallet.
ArNS: A decentralized domain name system for the permaweb.
Assignments: A mechanism in AO that enables processes to access and share data from Arweave. Assignments allow processes to request specific data items by their transaction IDs and distribute messages to multiple processes. They are implemented through the ao module's assign and send functions, supporting features like data loading and cross-process message sharing.
ao Module: A core library in AO that provides essential functionality for process communication and management. It includes functions for sending messages (ao.send), spawning processes (ao.spawn), managing assignments, and handling process state. The module maintains process environment information and manages message routing through an outbox system.
AO Computer: The AO Computer is an actor-oriented machine on the Arweave network, creating a unified computing environment across diverse nodes. It supports many parallel processes through an open message-passing layer, linking independent processes into a cohesive system, similar to how websites are interconnected via hyperlinks.
Arweave Name Token: A token based on the AO Computer that is connected to each registered ArNS Name. Each ANT gives the owner the ability to update the subdomains and Arweave Transaction IDs used by the registered name as well as transfer ownership and other functions.
Arweave Network Standards: Drafts and finalized standards for data formats, tag formats, data protocols, custom gateway features and anything that is built on top the Arweave Network. Specific standards are denoted by an associated number, e.g., ANS-###.
Base Layer Transaction: One of up to 1,000 transactions that make up a single Arweave block. These transactions form the foundation of the Arweave network's data structure and can contain bundled data items.
Bundled Data Item: A data item or transaction nested within an ANS-104 bundled transaction. These items enable efficient storage and retrieval of multiple data pieces within the Arweave network.
Bundler: A third-party service and gateway feature that bundles data files on a user's behalf.
Chunk: A unit of data that is stored on the Arweave network. It represents a piece of a larger file that has been split into smaller, manageable segments for efficient storage and retrieval.
Epoch: A specific duration (e.g., one day) during which network activities and evaluations are conducted. It serves as a key time frame for processes such as observation duties, performance assessments, and reward distributions within the network's protocols.
Eval: An onboard handler in AO processes that evaluates new code and verifies message origin. It processes incoming code, determines appropriate actions, and can be manually triggered to evaluate the Data field from messages. The Eval handler is also used internally by functions like .load to evaluate file contents.
Gateway Address Registry: A decentralized directory maintained in the AR.IO smart contract. It serves as the authoritative list of all registered gateways on the AR.IO Network, facilitating discovery, health monitoring, and data sharing.
Indexing: The act of organizing transaction data tags into queryable databases.
Layer 2 Infrastructure: Technology / infrastructure stack built 'above' a base layer. In this use, the AR.IO Network would be considered Layer 2 infrastructure to the base Arweave protocol.
Manifest: Special 'aggregate' files uploaded to Arweave that map user-definable sub-paths with other Arweave transaction IDs. This allows users to create logical groups of content, for example a directory of related files, or the files and assets that make up a web page or application.
Mempool: Short for 'memory pool,' is a component of Arweave mining nodes that temporarily stores valid transactions that have been broadcasted to the network but have not yet been added to a block.
Native Address: The way public addresses are commonly (or by spec) represented in their native blockchain. Arweave keys are 43 character base64url representations of the public key, while Ethereum keys use a different hashing algorithm and start with 0x etc.
Normalized Address: 43 character base64url representation of the sha256 hash of a public key. Public keys for other chains can be normalized by this representation.
Observer: A gateway selected to evaluate the performance of peer gateways in resolving ArNS names. Observers assess and report on the operational efficacy of other gateways.
Optimistic Indexing: Indexing transaction or data item headers before the associated L1 transaction has been accepted and confirmed in a chain block.
Period: A predefined time span (e.g., a day) that serves as a cycle for network activities such as dynamic pricing. It is a fundamental unit of time for operational and protocol processes within the network.
Permanent Cloud Network: A decentralized network that securely stores, distributes, and serves data and applications in a timeless, tamper-proof, and universally accessible way. Unlike traditional clouds, it ensures data permanence and user sovereignty by eliminating reliance on centralized providers and creating a resilient, censorship-resistant infrastructure.
Process ID: Every process in AO is assigned a unique immutable identifier code.
Protocol Balance: The primary sink and source of ARIO tokens circulating through the AR.IO Network. This balance functions as a programmatically encoded vault in the network's smart contract for managing ArNS revenue and incentive rewards distribution.
Protocol Rewards: ARIO Token incentive rewards distributed by the AR.IO protocol to eligible users and gateway operators, forming part of the network's economic incentive structure.
Public Key: The publicly known keys for a signer (wallet). Public keys are different byte lengths depending on the signer type (e.g. Arweave vs. Ethereum (ECDSA), vs Solana, etc.)
Seeding: The act of propagating new data throughout the network. Miner nodes seed Arweave base layer transaction data to other miners, while gateways ensure that the transactions they receive reach the Arweave nodes. Both gateways and Arweave nodes seed base layer transactions and data chunks.
Staking: The process of locking ARIO tokens into a protocol-facilitated vault, temporarily removing them from circulation until unlocked. This action represents an opportunity cost for the gateway operator and serves as a motivator to prioritize the network's collective interests.
Stake Redelegation: The process by which stakers move their delegated tokens from one gateway to another.
Stake Redemption: A feature allowing stakers to use their staked tokens for ArNS-related activities, such as purchasing names, extending leases, or increasing undername capacity.
Transaction ID: Every transaction and data file uploaded to Arweave is assigned a unique identifier code known as the Transaction ID.
Trust-minimization: Relates to enacting network security by minimizing the number of entities and the degree to which they must be trusted to achieve reliable network interactions. A network with trust-minimizing mechanisms means that it has reduced exposure to undesirable third-party actions and built-in incentives to reward good behavior while punishing bad behavior.
Vault: Token vaults are protocol level mechanisms used to contain staked tokens over time. Each vault contains a starting timestamp, ending timestamp (if applicable), along with a balance of tokens.
Wayfinder Protocol: The Wayfinder protocol provides applications with a pattern for dynamically switching / routing between network gateways. It also allows for abstraction of top level domain names from Arweave data and verifies the responses from AR.IO Gateways. It forms the basis of the ar:// schema, so users can seamlessly access ArNS names, Arweave base layer transactions, and bundled data items without the user providing a top-level domain.
Bootloader: A feature in AO that enables users to include a script to evaluate when spawning a process. The script can be included either with the Data property or with a txId specified on the On-Boot Tag.
Coroutine: A programming feature in AO similar to async/await or generators, allowing processes to execution (yield) and resume later. Used for handling asynchronous operations and message passing.
Handler Pattern: A mechanism in AO for matching and processing incoming messages based on their attributes. Can be defined using strings, tables, or functions to match message properties like Action tags.
Resolver: A special table in AO handlers where each key is a pattern matching table and its corresponding value is a function that executes when that pattern matches, enabling conditional execution based on message attributes.
WeaveDrive: A protocol (AOP-5) that provides virtual file system support for AO processes to efficiently read data directly from Arweave. It enables processes to access and manipulate data stored on Arweave through a standardized file system interface, with support for lazy loading, caching, and deterministic data access patterns. The protocol includes mechanisms for data attestation, availability verification, and process boot loading.
Attestor: An Arweave wallet address authorized to create attestation data items that grant access to specific Arweave data items using WeaveDrive.
Token Subledger: A process type in AO that implements the full messaging protocol of token contracts and enables splitting tokens from a parent process into a child process while maintaining fungibility.
Message Reference: A unique identifier assigned to messages in AO that enables tracking message chains and responses across processes, facilitating request-response patterns and message forwarding.
Message Forward: A mechanism in AO that enables passing messages between multiple processes while maintaining reference chains and origin information, useful for creating multi-step processing pipelines.
Assignment Check: A security feature in AO that provides whitelisted assignment protection for processes by verifying the trustworthiness of message assignments.
AO Environment: The core runtime environment in AO that manages process state, message handling, and execution context. It includes process identification, module references, authorities, and outbox management for coordinating process communication.
Process Authority: A security mechanism in AO that defines which entities (identified by their addresses) are trusted to interact with a process. Authorities can send messages that will be accepted and processed by the process.
Process Outbox: A component of an AO process that temporarily stores outgoing messages, spawns, and assignments before they are processed by the network. The outbox manages the process's communication with other processes.
Message Tags: Metadata attached to AO messages that provide context and instructions for message processing. Tags can be extractable or non-extractable, and forwardable or non-forwardable, affecting how messages are processed and routed.
Message Normalization: The process of standardizing message format in AO by extracting tags into a consistent structure and ensuring proper handling of message attributes. This enables reliable message processing across the network.
Message Sanitization: A security feature in AO that removes non-forwardable tags from messages before forwarding, ensuring that sensitive or system-specific information is not inappropriately propagated through the network.
Process Inbox: A component of an AO process that stores incoming messages for processing. The inbox has a maximum capacity and implements overflow protection to prevent memory issues while maintaining message order.
Process Module: A reusable component in AO that defines the behavior and capabilities of a process. Modules can be referenced and reused across different processes, providing standardized functionality and interfaces.
Process Result: The output of an AO process execution, including any generated messages, spawned processes, assignments, and error information. Results are used to coordinate process communication and manage state changes.
Single System Image: A unified computing environment in AO that creates a cohesive system across diverse nodes in a distributed network. This allows processes to operate independently while maintaining a unified user experience, similar to how websites on different servers are connected via hyperlinks.
Stake-Exclusivity Period: A time window in AO during which staked collateral is exclusively reserved for a specific message transmission, preventing it from being reused. This mechanism ensures stake availability for potential slashing if discrepancies are found in the message.
Time Value of Stake: The economic cost in AO associated with locking stake capital for a specific duration to secure message transmission. This value is calculated based on the opportunity cost of the locked capital and expected annual return rates.
Permissionless Ecosystem Funding: A token issuance mechanism in AO that allows developers to fund their applications by receiving AO tokens from users who bridge assets into their protocols. The funding rate automatically adjusts with the token emission curve.
Permaweb Ecosystem Development Guild: An alliance of organizations and builders in AO that develop and maintain core infrastructure, funded through native yield generated by bridged assets. The funding naturally decreases with token emission rate.
Pushing: The process in AO where Messenger Units relay messages through the network, coordinating with Scheduler Units for message ordering and Compute Units for state calculation. This continues recursively until there are no more messages to process.
State Attestation: A cryptographic assurance mechanism in AO that verifies the correctness of computations and states. In AO's state management, attestations are cryptographically signed statements by Compute Units verifying process state computation results. In the AO Core Protocol, attestations provide cryptographic assurance that verifies the correctness of an output, representing proof that a specific computation produced the expected result when combined with the message and hashpath. Both forms enable trustless verification without requiring full recomputation.
Bridge: A system that enables assets from other networks to be represented and used within AO. Bridges consist of smart contracts on both the native chain and AO network, generating derivative tokens that represent the bridged assets. They facilitate cross-chain interoperability and asset transfer between different blockchain networks.
AOX: A general-purpose bridge that facilitates the transfer of assets from traditional exchanges and Ethereum to the AO network. It enables users to bring their assets from external networks into the AO ecosystem, expanding the range of assets available for use within AO.
Quantum: A bridge developed by Astro Protocol that enables the transfer of AR tokens from the Arweave network to the AO network. It facilitates seamless movement of Arweave's native token into the AO ecosystem, enabling users to leverage their AR holdings within AO-based applications and protocols.
Cast Message: A type of message in AO that is sent to a Scheduler Unit without waiting for a response, enabling one-way communication patterns. This allows for more efficient message passing when immediate responses aren't needed.
aoconnect: A JavaScript/TypeScript library that enables interaction with the AO system from Node.js or browser environments. It provides a comprehensive set of tools and utilities for developers to interact with AO processes, send messages, and manage AO resources programmatically.
AO Dev-Cli: A command-line tool for building AO WebAssembly modules, supporting both Lua and C/C++ development. It provides a streamlined workflow for initializing projects, building modules, and deploying them to the AO network. The tool features configurable build settings, external library support, and predefined memory presets for different use cases.
aos console: A command-line interface tool for interacting with AO networks. It allows developers to deploy processes, send messages, and manage AO resources through terminal commands.
DataItemSigner: A function used to cryptographically sign data items before they're submitted to the AO network, ensuring authenticity and ownership.
Relay Operator: An entity that facilitates message transmission in the AO network, often requiring payment in the form of tokens to relay messages.
Tag System: The structured protocol for message routing in AO using key-value pairs. Common patterns include Action-Target-Quantity for token transfers and other operations.
Balances Implementation: The pattern for implementing token balances within AO processes, typically using a Lua table with wallet addresses as keys.
Blueprints: Templates in AOS that streamline the development of distributed applications by providing a framework for creating consistent and efficient processes across the AO network.
AR Token: The native cryptocurrency of the Arweave network used for transaction fees, data storage payments, and mining rewards. AR tokens are required to store data on the network, incentivize miners to maintain the blockweave, and participate in network governance. The token has a fixed maximum supply and its value is tied to the network's storage capacity. One AR is equal to one trillion (1,000,000,000,000) Winstons, which is the smallest unit of the token.
Atomic Assets: A unique data type on Arweave, linking data, metadata, and a smart contract under one identifier.
Arweave Gateway: Nodes that provide HTTP access to data stored on the Arweave network.
Proof of Access: Arweave's consensus mechanism that combines proof of work with proof of storage.
SmartWeave: A smart contract platform for Arweave that uses lazy-evaluation.
Succinct Proof of Random Access: Arweave's current mining mechanism that combines proof of work with proof of storage.
Universal Data License: Arweave's on-chain content licensing system.
Wallet: A software application that allows users to store, send, and receive AR tokens, as well as interact with Arweave applications.
Warp: A smart contract execution environment for Arweave.
Weave: The collective data stored on the Arweave network.
Wildfire: Arweave's self-sustaining network participation reward system.
AO Package Manager: A package manager for AO, enabling developers to manage and distribute AO modules and dependencies.
AO Ventures: A venture capital firm investing in projects within the AO ecosystem.
Arlink: Arlink is a one click deployment platform built on Arweave, enabling developers to permanently host front-end applications such as React, Next.js, or static websites with a single click. It functions like Vercel but leverages the Arweave Permaweb for censorship-resistant, immutable, and durable hosting.
Autonomous Finance: A decentralized finance initiative utilizing AO technologies for autonomous financial operations.
Bazar: A fully decentralized atomic asset exchange built on the permaweb, leveraging the Universal Content Marketplace (UCM) protocol and AO. It enables content creators to trade digital assets with real-world rights through a trustless orderbook process. As the first user interface operating on the UCM protocol, Bazar facilitates the exchange of various digital content types, from images and music to applications, while ensuring secure and efficient trading through AO processes.
BetterIDEa: A native web-based IDE for AO development, featuring Lua language server integration and AO Package Manager support.
Botega: A decentralized finance platform built on AO that facilitates asset exchanges through multiple models including AMMs and order books. Its unique architecture treats each liquidity pool as an independent process with localized state, enabling high-throughput transactions, autonomous execution of advanced orders, and AI integration. Botega is fully decentralized with its frontend on Arweave and execution logic in AO processes.
Community Labs: A collaborative group dedicated to advancing the permaweb ecosystem.
LiquidOps: An over collateralised lending and borrowing protocol built on Arweave and AO.
Dexi: An autonomous application that aggregates real-time financial data from events within the AO network, including asset prices, token swaps, and liquidity fluctuations. The Dexi Terminal provides a web interface similar to TradingView for monitoring assets and trading tokens. AO applications can subscribe to Dexi's data agents to receive verifiable real-time data, eliminating the need for external oracles.
Forward Research: A research organization exploring and expanding the capabilities of the AO network.
Longview Labs: An organization focused on developing decentralized technologies and applications.
Odysee: A decentralized video platform utilizing blockchain for content distribution. Currently being migrated to Arweave/AO via ArFleet.
Permaswap: A decentralized exchange built on the Arweave network, supporting transactions within the permaweb ecosystem.
Redstone: A decentralized data analytics platform built on Arweave.
Trackgood: A decentralized supply chain management system using Arweave for data integrity.
Wander: A non-custodial Arweave and AO native wallet with extensive features. Wander is available as a browser extension, mobile application, and embedded smart account.
Beacon: The most secure wallet for AO and AR networks, offering features such as two-factor authentication (2FA), multi-signature capabilities, passkeys, recovery options, and more to ensure robust security.
GraphQL for Arweave: A query language used to interact with Arweave data in a flexible and efficient manner, allowing developers to specify exactly what data they need.
Multi-sig: A multi-signature wallet or smart contract that requires multiple signatures or approvals from different parties before executing a transaction or action. This enhances security and control by distributing decision-making authority.
Permaweb Journal: An on-chain publication and knowledge hub focused on the Arweave and AO ecosystem. It serves as a central resource for news, insights, and developments within the permaweb community.
Lua: A lightweight, embeddable scripting language used in AO for process development. Lua is utilized within the AO environment for writing process code and interacting with the AO system.
Under_names: ANT owners and controllers can configure multiple subdomains for their registered ArNS name known as "under_names" or more easily written "undernames". These undernames are assigned individually at the time of registration or can be added on to any registered name at any time. Under_names use an underscore "_" in place of a more typically used dot "." to separate the subdomain from the main ArNS domain.
Permaweb Glossary: A comprehensive reference guide for the Arweave and AO ecosystem, providing detailed explanations of key terms, concepts, and technologies. It serves as an educational resource for developers, users, and community members to better understand the permaweb ecosystem. A key feature is its portability - the glossary can be embedded in other websites and applications via iframes, making it easily accessible across the permaweb.
Protocol.Land: Decentralized, source controlled, code collaboration where you own your code.
Stablecoin: A type of cryptocurrency designed to maintain a stable value relative to a specific asset or basket of assets, typically a fiat currency like the US dollar. Stablecoins provide price stability while leveraging the benefits of blockchain technology, making them useful for trading, payments, and as a store of value in the crypto ecosystem.
USDA: Astro USD, or USDA, is an AO-native stablecoin used to transact, facilitate, and interact with various other DeFi protocols in the ecosystem, while acting as a store of value, a medium of exchange, and a unit of account. USDA is a stablecoin backed by assets within the Arweave and AO ecosystems. It leverages Arweave's decentralized storage and AO's smart contract-like processes for secure and efficient value exchange, balancing transparency and decentralization.
Astro Protocol: A blockchain-based framework that enables the minting of stablecoins and synthetic assets, backed by on-chain collateral stored and managed by processes developed within the AO compute environment. Astro introduces dynamic liquidation processes and stability modules to enhance system resilience and user trust.
Data Item: A standardized data format defined in the ANS-104 bundle specification, used as the preferred storage format for Arweave bundles. Data items are signed pieces of data that can be bundled together for efficient storage on Arweave. In AO, messages are implemented as data items with specific protocol tags, making them the foundation of process communication and state management.
AO Link: A fully decentralized transaction explorer for the AO network (accessible at aolink.ar.io or ao.link) that provides real-time visualization and interaction with on-chain messages and computations. It features message exploration, graphical visualization of message relationships, manual message interaction capabilities, and real-time streaming of network activity. The platform enables users to view token balances, process inboxes, and inspect process code, offering comprehensive insight into the AO network's operations.
AO Teal: A typed version of Lua for AO development, similar to TypeScript for JavaScript, that adds static type checking and annotations to enhance code safety and reliability. It includes features for secure coding practices and integrates with a biginteger implementation for precise handling of large numbers in financial applications. Teal enables developers to write more robust and maintainable code for AO processes.
AO Form: A declarative infrastructure management tool for the AO ecosystem, similar to Terraform, that enables developers to deploy and upgrade multiprocess systems through a single configuration file. It provides state management for deployments, efficient component upgrades, and streamlined infrastructure maintenance, making it essential for managing complex AO process networks and optimizing development workflows.
Basejump: A social gaming platform built on AO that features the Action substrate. It provides a no-code environment for creating, discovering, and monetizing interoperable games and assets. Basejump is consumer-focused with an avatar-centric interface, featuring a PVP battle game for hyperobjects that runs in Discord and on the web.
AO Core Protocol: The foundational execution protocol of AO that enables decentralized computing and communication between nodes. AO Core provides a framework into which any number of different computational models, encapsulated as primitive devices, can be attached. It serves as the base layer for the AO ecosystem, offering universal primitives for decentralized computations including hashpaths for state-space referencing, unified data structures for program states, attestation mechanisms, and a meta-VM for executing various computational models. HyperBEAM is a modular system that implements this protocol, while AO builds an actor-based environment on top of it. The protocol is designed to be computer-native to internet technologies, particularly compatible with HTTP protocols. Every item on the permaweb is described as a Message, which can be interpreted as either a map of named functions or as a concrete binary term. Messages can be called through the creation of another message, providing a map of arguments to the execution. The protocol does not enforce any forms of consensus or particular virtual machine, instead focusing on offering the simplest possible representation of data and computation.
Asynchronous Message Passing: A communication paradigm where senders don't wait for receivers to be ready, allowing for non-blocking operations and better scalability. This enables efficient process communication in distributed systems.
Checkpoint: A saved state of a process that can be used to resume execution from a known point, used for persistence and recovery. This enables process state preservation and restoration capabilities.
Decentralized Execution: The ability to run processes across a distributed network without centralized control or coordination. This enables truly distributed computing capabilities in the HyperBEAM ecosystem.
Erlang: The programming language used to implement the HyperBEAM core, known for its robustness and support for building distributed, fault-tolerant applications. It provides the foundation for HyperBEAM's reliable message passing and process management.
~json-iface@1.0: A device in HyperBEAM that offers a translation layer between the JSON-encoded message format used by legacy versions and HyperBEAM's native HTTP message format.
HTTP Message Signature: A standardized method (RFC9421) for creating, encoding, and verifying digital signatures within HTTP messages, crucial for the security model of HyperBEAM and the AO Core protocol. In HyperBEAM, HTTP Signed Messages are used to authenticate node configuration changes, verify message integrity, and establish trust between nodes. The hb_message module in HyperBEAM provides functionality to convert between different message formats, including HTTP Signed Messages, enabling secure communication across the decentralized network. This signature mechanism is fundamental to the attestation system that allows nodes to cryptographically prove the correctness of computations without requiring full recomputation.
~p4@1.0: A device that runs as a pre-processor and post-processor in HyperBEAM, enabling a framework for node operators to sell usage of their machine's hardware to execute AO Core devices.
Sam Williams: The founder of Arweave and the creator of the AO Computer concept. He pioneered the development of the permaweb and decentralized storage technologies, leading the creation of both the Arweave network and the AO ecosystem. His vision has been instrumental in advancing decentralized computing and permanent data storage solutions.
Metalinks: A decentralized link hub platform that enables users to create and manage their web presence without intermediaries. Metalinks provides a web3-native solution where users can own their content and control their digital presence, embodying the principles of decentralization and user sovereignty. The platform allows users to create their own decentralized link hub, offering pure web3 freedom without traditional gatekeepers or centralized control.
Fair Launch: A cryptocurrency distribution method that ensures equal access and sustainable funding for projects without traditional gatekeepers or early investor advantages. In the AO ecosystem, fair launches enable projects to receive funding through the Permaweb Index, where users can allocate their AO yield to support development. This model promotes transparency and decentralization by avoiding pre-allocation, pre-mining, or insider advantages, while ensuring builders can secure sustainable funding. Projects launched this way receive tokens based on community allocation of yield, creating a more equitable system where success is tied directly to community support and utility rather than speculative investment.
Converge Protocol: The codename for AO Core Protocol. See AO Core Protocol for the complete definition.
Device: A component in the AO Core Protocol that specifies how a message should be interpreted. Each message may optionally state a Device which should be used by Converge-compatible systems to interpret its contents. If no Device is explicitly stated, it must be inferred as 'Message'. Every Device must implement functions with the names 'ID' and 'Keys'.
Hashpath: A cryptographic memoization of the tree of executions that were the source of a given piece of data in the AO Core Protocol. It is derived by cryptographically mixing two prior commitments, resulting in a short (32 bytes with SHA2-256) but verifiable reference to the entire computation tree.
Stack Device: A special device in HyperBEAM that combines a series of devices on a message into a single 'stack' of executable transformations. When added as the highest Device tag on a message, it scans the remainder of the message's tags looking for and loading other messages it finds, passing through each element of the stack in turn during execution.
Attestation: A cryptographic assurance mechanism in AO that verifies the correctness of computations and states. In AO's state management, attestations are cryptographically signed statements by Compute Units verifying process state computation results. In the AO Core Protocol, attestations provide cryptographic assurance that verifies the correctness of an output, representing proof that a specific computation produced the expected result when combined with the message and hashpath. Both forms enable trustless verification without requiring full recomputation.
Path: A way to reference messages in the AO Core Protocol that starts from a given message and applies a series of additional messages on top of it. Each resulting message must have an ID resolvable via its device, enabling additional paths to be described atop the intermediate message. Paths are designed to be compatible with HTTP protocols.
Permissionlessness: A property of computation systems where no actor in the ecosystem may be denied the ability to use the network by any other actor or group. This is a fundamental property of decentralized computation machines, though it can only be offered in degrees rather than absolutely.
Trustlessness: A property of computation systems where users can participate in the network without needing to trust other parties are not acting maliciously. Like permissionlessness, this is a fundamental property of decentralized computation machines that can only be offered in degrees rather than absolutely.
~meta@1.0: A configuration device in HyperBEAM that provides an interface for specifying a node's hardware, supported devices, metering, and payments information. It allows external clients to find and validate node configurations in the network, serving as the primary configuration mechanism for HyperBEAM nodes.
~relay@1.0: A device in HyperBEAM used to relay messages between nodes and the wider HTTP network. It provides an interface for sending and receiving messages using various execution strategies, facilitating communication across the network.
~wasm64@1.0: A device in HyperBEAM that executes WebAssembly code using the Web Assembly Micro-Runtime (WAMR). It enables the execution of WASM modules from any other device and supports devices written in languages like Rust, C, and C++.
~compute-lite@1.0: A lightweight device in HyperBEAM that wraps a local WASM executor, used for executing legacy AO processes. It enables compatibility with older AO network processes within the HyperBEAM environment.
~snp@1.0: A device in HyperBEAM used to generate and validate proofs that a node is executing inside a Trusted Execution Environment (TEE). It enables trust-minimized attestations of AO Core executions using ephemeral key pairs that exist only within the TEE.
Trustless Execution: A property of computation systems where users can participate in the network without needing to trust other parties are not acting maliciously. Like permissionlessness, this is a fundamental property of decentralized computation machines that can only be offered in degrees rather than absolutely.
~simple-pay@1.0: A simple, flexible pricing device in HyperBEAM that can be used with p4@1.0 to offer flat-fees for the execution of AO Core messages. It provides a straightforward mechanism for monetizing node services.
~faff@1.0: A simple pricing and ledger device for p4@1.0 in HyperBEAM that allows nodes to offer access to their services only to a specific set of users. It's useful for personal use or servicing specific applications.
scheduler@1.0: A device in HyperBEAM used to assign a linear hashpath to an execution, ensuring deterministic ordering that all users can access. It enables the creation of executions that mirror traditional smart contracting networks when used with other AO Core devices.
stack@1.0: A device in HyperBEAM used to execute an ordered set of devices over the same inputs. It allows users to create complex combinations of other devices and apply them as a single unit with a single hashpath.
~process@1.0: A device in HyperBEAM that enables users to create persistent, shared executions accessible by multiple users. It allows customization of execution and scheduler devices, supporting various execution patterns. It includes a push key for moving messages from a process's execution outbox into another execution's schedule.
ARIO Token: The native cryptocurrency of the AR.IO Network that powers the world's first Permanent Cloud. With a fixed supply of 1 billion tokens, ARIO serves multiple functions: powering ecosystem operations, facilitating transactions, and incentivizing network participation. It enables critical operations like gateway staking, ArNS domain registrations, and protocol rewards distribution. The token follows a non-inflationary model where network revenue is recycled to fund rewards rather than minting new tokens. Each ARIO is divisible into 1,000,000 micro-ARIO (µARIO) units to support a wide range of transactions.
Armstrong: The smallest unit of the AO Token. One AO is equal to one trillion (1,000,000,000,000) Armstrongs. When specifying token quantities in AO transactions, the amount is typically expressed in Armstrongs rather than AO tokens.
Winston: The smallest unit of the AR Token (Arweave). One AR is equal to one trillion (1,000,000,000,000) Winstons. This denomination is similar to satoshis in Bitcoin and is used for precise calculations and transactions within the Arweave network.
micro-ARIO: The smallest unit of the ARIO Token. One ARIO is equal to one million (1,000,000) micro-ARIO. This subunit allows for precise calculations and transactions within the AR.IO Network, enabling granular token operations for services like gateway staking and ArNS domain registrations.
Action: A decentralized framework built on AO and Arweave designed for creating self-sovereign games, digital assets, and communities. Action introduces 'hyperobjects' (interoperable game assets like avatars, items, and environments) that can be used across different games and platforms. The ecosystem is powered by the ACTION token, which enables hyperobject creation, governance participation, and economic coordination. Action emphasizes originality, collaboration, and sustainability, with a portion of fees directed toward real-world environmental initiatives like rainforest protection.
ACTION Token: The native utility token of the Action ecosystem with a fixed supply of 10 billion tokens. It enables hyperobject creation, marketplace transactions, governance participation, and ecosystem growth. Unlike traditional tokens, ACTION is designed primarily for platform utility rather than speculation, with 75% of the supply allocated to community distribution. The token follows a non-inflationary model and incorporates treasury mechanisms to fund environmental and social initiatives through community governance.
Hyperobject: The foundational digital assets of the Action ecosystem that serve as building blocks for game, commerce, and creativity. Hyperobjects include avatars ('Action Figures'), game assets ('Action Items'), and game environments ('Worlds'). Unlike traditional NFTs, hyperobjects can be large applications due to AO's scalability, and they exhibit context-dependent behavior, adapting dynamically to the specific game or world in which they're used. Each hyperobject runs as a unique AO process with corresponding Arweave data representing its underlying assets.
Merkle Root: The result of hashing all transactions in a block, pairing those hashes, and hashing them again until a single hash remains. In blockchain systems like Arweave and AO, Merkle roots enable efficient verification of transaction data without requiring nodes to process every transaction individually. This technique significantly reduces the computational resources needed to verify blocks and is central to maintaining blockchain integrity. In the AO Core Protocol, HashPaths use Merkle tree principles to create a cryptographic history of all operations that led to a particular state, allowing verification of the entire computation chain with a single hash.
AO Yield: A customizable reward system in the AO ecosystem that allows users to earn tokens based on their Arweave (AR) holdings and deposited assets (like stETH and DAI). Users can allocate their yield to different options: PI (receiving diversified exposure through the Permaweb Index), AO (continuing to earn AO tokens), AR (converting yield to Arweave tokens), or specific fair launch projects. When allocated to ecosystem projects, the yield helps fund development while users receive project tokens in return. The system operates through trustless, audited contracts on Ethereum for bridged assets, with deposits remaining withdrawable at any time.
Permaweb Index: A fair launch funding mechanism for the permaweb ecosystem, launched on Pi Day (3.14). It introduces a new model for funding crypto projects where users can allocate their AO yield to support ecosystem development. The index is represented by the PI token, which provides diversified exposure to key permaweb assets: 33.3% AO, 33.3% Arweave (AR), and 33.3% fair launch projects. This structure enables builders to secure sustainable development funding while allowing community members to support projects they believe in, all while maintaining broad exposure to the ecosystem's growth through a single token.
ArDrive: A decentralized storage application built on Arweave that enables users to store and manage their files permanently. It offers a pay-once, store-forever model, eliminating the need for recurring subscription fees. ArDrive provides true data ownership, ensuring files remain accessible even if the company disappears, and supports both private and public data storage options. The platform is optimized for storing various types of data, including photography, digital art, and NFTs.
ArDrive CLI: A command-line interface tool for interacting with ArDrive, enabling users to upload, download, and manage files on the Arweave network programmatically. It provides a powerful way to automate file operations and integrate ArDrive functionality into scripts and applications.
ArDrive Turbo: An enhanced version of ArDrive that provides faster upload speeds and improved performance for large files. It optimizes the upload process by implementing advanced bundling and chunking techniques, making it more efficient for handling substantial amounts of data.
ArDrive Core: The fundamental library that provides the core functionality for interacting with ArDrive. It includes essential features for file management, data encryption, and Arweave integration, serving as the foundation for both the ArDrive web application and CLI tools.
Rug Pull: A malicious practice in cryptocurrency where project developers abandon the project and take investors' funds, or deliberately manipulate token value before selling their holdings, leaving other investors with worthless tokens. AO's Fair Launch model prevents rug pulls by eliminating pre-mining, pre-allocation, and insider advantages. Instead, projects receive funding through the Permaweb Index based on community-allocated yield, ensuring that token distribution is tied directly to community support and utility rather than speculative investment. This model removes the ability for developers to suddenly dump large token holdings, as tokens are earned gradually through actual development and community backing.
Legacynet: A development and testing network for the AO computer launched on February 27, 2024. It allows developers and early adopters to interact with the AO computer without fees, providing a sandbox environment for testing and building applications before deploying to mainnet. The network includes features like the aos console for process management and native community chat servers for developer collaboration. It serves as a crucial platform for exploring AO's hyper parallel computing capabilities and building towards mainnet deployment.
RandAO: A novel decentralized random number generation protocol built on AO that achieves robust security through an 'any honest' guarantee - ensuring randomness integrity as long as at least one participant remains honest. It integrates Verifiable Delay Functions (VDFs) with a commit-reveal scheme to prevent denial of service attacks and manipulation attempts while maintaining unpredictable output generation.
Verifiable Delay Function: A cryptographic primitive that requires a specified number of sequential steps to evaluate (and hence a theoretical amount of time), yet produces a unique output that can be efficiently verified. VDFs feature sequential computation that cannot be significantly accelerated even with parallel processing, while allowing for efficient verification of results. In RandAO, VDFs prevent denial of service attacks by ensuring that once commitments are made, the final entropy value is deterministically locked but requires time to calculate.
Commit Reveal Scheme: A decentralized protocol for generating verifiable random numbers where providers first commit to entropy values by submitting their hashes, then reveal the original values which are verified against the commitments. The naive implementation suffers from a critical any-malicious denial of service vulnerability that RandAO addresses through VDF integration.
$RNG Token: The native utility token of the RandAO ecosystem that captures the value of decentralized random number generation. All randomness requests must be paid for in $RNG tokens, establishing continuous demand. The token economy creates a marketplace where providers compete on service quality and earn rewards through both direct service payments and staking mechanisms.
Pietrzak's VDF: An elegant implementation of a Verifiable Delay Function using the RSW timelock puzzle. The construction is defined by an RSA modulus (N), input value (x), number of squaring operations (T), and number of checkpoints (n). It creates checkpoints that split verification into equal segments that can be verified independently, reducing verification time through parallelization.
RSW Timelock Puzzle: A cryptographic construction developed by Rivest, Shamir, and Wagner that requires sequential computation to solve, making it impossible to significantly accelerate even with parallel processing. In RandAO, it serves as the foundation for Pietrzak's VDF implementation, creating a deterministic time delay between commitment and revelation phases to prevent denial of service attacks in randomness generation.
Parallel Processing: A fundamental capability in AO where an arbitrary number of processes can execute simultaneously and independently. Unlike traditional blockchain networks where computation happens in a single global state, AO processes maintain independent states and can operate separately, sharing available computational resources efficiently. During idle times, resources are automatically reallocated to active processes, maximizing throughput and enabling scalability mechanics similar to traditional web2 systems. This parallel architecture, combined with holographic state management, forms the foundation of AO's hyper parallel computing capabilities.
Hyper Parallel Computing: The ability to execute multiple processes simultaneously and independently, allowing for parallel execution of tasks and improved overall system performance. This is a key feature of AO's architecture, enabling efficient utilization of computational resources and faster processing times.
Deflationary: A property of Arweave's tokenomics where the effective token supply decreases over time due to the storage endowment mechanism. As users pay for permanent storage, tokens are locked in the endowment, and due to the storage cost decline rate (historically averaging 38% per year), fewer tokens need to be released from the endowment than were initially deposited. This creates a natural token sink that reduces circulating supply proportionate to network usage, strengthening the token's value proposition without extracting value from users.
Endowment Simulation: A computational model that projects the behavior of Arweave's storage endowment over time based on variables like storage cost decline rate, token prices, and network usage. This tool helps users understand the long-term sustainability of the permanent storage economics system.
Non-value Extractive Mechanism: A tokenomic design where costs to users represent actual value (in Arweave's case, storage security) rather than rent extraction. This creates alignment between user interests and protocol economics, as users pay for reliability rather than arbitrary fees. This mechanism is fundamental to Arweave's Permanent Storage Economics model.
Permanent Storage Economics: The economic model underlying Arweave's permanent storage solution, where upfront payments create a Storage Endowment that generates returns to fund ongoing storage costs. This model, as a non-value extractive mechanism, treats storage costs not as extraction but as purchased security, with higher costs correlating to greater reliability and permanence. The system's sustainability is projected through the endowment simulation tool.
Storage Cost Decline Rate: The annual percentage decrease in data storage costs due to technological advancements. Historically averaging around 38% per year over the past 50 years (as of 2025), this rate directly impacts Arweave's tokenomics by reducing the number of tokens that need to be released from the Storage Endowment over time to maintain stored data.
Storage Endowment: A financial mechanism in Arweave where users pay upfront for long-term storage (approximately 200 years at current prices). These tokens are removed from circulation and held in the endowment, only to be released if/when needed to pay for ongoing storage costs. This creates a natural token sink that reduces circulating supply proportionate to network usage.
Token Sink: A mechanism in the Arweave ecosystem that removes tokens from circulation, effectively reducing the available supply. In Arweave's case, the Storage Endowment functions as a token sink, as tokens paid for storage are locked away for extended periods. This mechanism contributes to the deflationary nature of the AR token.
TabM: A unified data format in HyperBEAM standing for 'Type Annotated Binary Messages'. TabM serves as the intermediary representation that all message formats can convert to and from, enabling seamless communication between different encoding schemes. It includes type annotations that preserve the data types of fields (such as integers, strings, and binaries), allowing for accurate message transformation across the system. TabM is a core component of HyperBEAM's message processing pipeline, bridging the gap between various message formats while preserving data integrity.
Codecs: Modular components in HyperBEAM that convert between different message formats and the unified TabM format. Codecs solve interoperability challenges in distributed systems by using TabM as an intermediate format, reducing complexity from N² direct conversions to N codecs for N formats. This maintains data integrity and type safety while supporting various encodings (ANS-104, HTTP Signatures, JSON, flat formats). The architecture makes the system extensible - adding a new format only requires one codec that converts to/from TabM, rather than creating conversions for every existing format. This enables HyperBEAM to seamlessly communicate across different systems while maintaining consistent message semantics.
Flat Format: A simple key-value encoding scheme in HyperBEAM where data is represented as a series of 'key: value' pairs, each on a new line. This format is particularly used in configuration files and certain message types due to its simplicity and human readability. For example, a flat format message might look like 'Content-Type: text/plain\nAction: update\nValue: 123'. Unlike nested formats like JSON, flat formats have no hierarchy or nesting capabilities, making them easier to parse but less expressive. In HyperBEAM, flat formats are often used for configuration files and basic message headers where nested structures aren't necessary.
~patch@1.0: A HyperBEAM device that enables AO processes to expose specific parts of their internal state for direct HTTP access. It allows developers to make selected data immediately readable via a standardized URL path, improving performance for web frontends and data services by replacing slower dryrun calls with immediate state reading.
Permaweb Deploy: A Node.js command-line tool designed to streamline the deployment of web applications to the Arweave permaweb. It automates the process of uploading build folders using Turbo, creating manifests, and updating ArNS (Arweave Name Service) records. The tool supports both mainnet and testnet deployments and integrates easily with GitHub Actions for continuous deployment workflows.
~lua@5.3a: A HyperBEAM device (lua@5.3a) that enables dynamic, on-the-fly computation of process state using Lua scripts. It allows transformation of process state without altering the underlying data, supporting pipeline-style processing where state is passed as a base message and custom Lua functions are executed to return computed results.
Wayfinder SDK: A client-side routing and verification library for decentralized data access on the Arweave network. It provides intelligent gateway routing based on performance and availability, cryptographic data verification to ensure content integrity, and seamless access to permaweb content by automatically selecting optimal gateways and verifying data authenticity.
dryrun: A simulation of an operation without committing it to the blockchain, allowing you to test and validate interactions on process state before applying them permanently. This method is being deprecated for HyperBEAM processes in favor of the state patching mechanism (~patch@1.0 device) for better performance, as dryrun calls caused bottlenecks on Legacynet. Still useful for testing token balances, transfers, and other operations locally before execution.
