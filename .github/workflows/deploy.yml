name: üöÄ Enhanced Deploy & Crawl

on:
  push:
    branches: [main, preview]
    paths: ['src/**', 'public/**', 'package.json']
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC
  workflow_dispatch:
    inputs:
      force_crawl:
        description: 'Force full re-crawl'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - run: bun install --frozen-lockfile
      
      - name: Detect Crawl Config Changes
        id: config_changes
        run: |
          # Check if crawl-config.json has changed in this push
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get the list of changed files in this push
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null || echo "")
            
            # Check if crawl-config.json is in the changed files
            if echo "$CHANGED_FILES" | grep -q "public/crawl-config.json"; then
              echo "crawl_config_changed=true" >> $GITHUB_OUTPUT
              echo "üîÑ Crawl configuration has changed - will trigger full recrawl"
            else
              echo "crawl_config_changed=false" >> $GITHUB_OUTPUT
              echo "üìã No crawl configuration changes detected"
            fi
          else
            # For non-push events, default to false
            echo "crawl_config_changed=false" >> $GITHUB_OUTPUT
            echo "üìã Non-push event - using default crawl behavior"
          fi
      
      - name: Run Crawler
        run: |
          # Determine if we should do a full recrawl
          SHOULD_FORCE_CRAWL=false
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            SHOULD_FORCE_CRAWL=true
            echo "üïê Scheduled run - doing full recrawl"
          elif [[ "${{ github.inputs.force_crawl }}" == "true" ]]; then
            SHOULD_FORCE_CRAWL=true
            echo "üîß Manual force crawl requested"
          elif [[ "${{ steps.config_changes.outputs.crawl_config_changed }}" == "true" ]]; then
            SHOULD_FORCE_CRAWL=true
            echo "‚öôÔ∏è Crawl config changed - doing full recrawl"
          fi
          
          if [[ "$SHOULD_FORCE_CRAWL" == "true" ]]; then
            echo "Running forced full re-crawl"
            bun run crawl:force
          else
            echo "Running smart crawl (auto-detects config changes)"
            bun run crawl:smart
          fi
        env:
          NODE_ENV: production
      
      # - name: Test & Lint
      #   run: |
      #     bun run test
      #     bun run lint
        
      - name: Commit Index Changes (Daily)
        if: github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/docs-index.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update daily index [$(date +%Y-%m-%d)]"
            git push
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            bun scripts/deploy.js build
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
            bun scripts/deploy.js all
          else
            bun scripts/deploy.js vercel
          fi
        env:
          NODE_ENV: production
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          ANT_PROCESS: ${{ secrets.ANT_PROCESS }} 